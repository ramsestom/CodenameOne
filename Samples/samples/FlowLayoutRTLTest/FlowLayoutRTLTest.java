package com.codename1.samples;


import com.codename1.components.SpanLabel;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.CheckBox;
import com.codename1.ui.Command;
import static com.codename1.ui.Component.CENTER;
import static com.codename1.ui.Component.LEFT;
import static com.codename1.ui.Component.RIGHT;
import static com.codename1.ui.ComponentSelector.$;
import com.codename1.ui.Container;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.plaf.Border;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class FlowLayoutRTLTest {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");
        UIManager.getInstance().getLookAndFeel().setRTL(true);

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public class TestForm extends Form {
        boolean hebrew = false;
        TestForm() {
            super("Hi World", BoxLayout.y());
            Toolbar tb = new Toolbar();
            Form hi = this;
            hi.setToolbar(tb);
            tb.addCommandToLeftSideMenu(new Command("Test") {;
                public void actionPerformed(ActionEvent e) {
                    System.out.println("Action clicked");
                }
            });
            CheckBox rtl = new CheckBox("RTL");
            rtl.setSelected(isRTL());
            rtl.addActionListener(e-> {
                getUIManager().getLookAndFeel().setRTL(rtl.isSelected());
                hebrew = rtl.isSelected();
                //getUIManager().getLookAndFeel().refreshTheme(true);
                new TestForm().show();
                //hi.refreshTheme();
            });
            hi.add(rtl);
            hi.add(new SpanLabel("Test 1: The Labels below should each be rendered centered in its row "));
            hi.add(new SpanLabel("Container paddings (trbl)=(0, 2mm, 2mm, 2mm)"));
            int[] alignments = new int[]{LEFT,RIGHT,CENTER};
            for (int align : alignments) {
                FlowLayout fl = new FlowLayout();
                fl.setAlign(align);
                Container cnt = new Container(fl);
                $(cnt).selectAllStyles()
                        .setBorder(Border.createLineBorder(1))
                        .setPaddingMillimeters(0, 2, 2, 2);
                Label l = new Label();
                $(l).selectAllStyles().setPadding(0).setMargin(0);
                cnt.add(l);
                hi.add(FlowLayout.encloseCenter(cnt));
                l.setText("TEXT"+align);


            }
            hi.add(new SpanLabel("Test 2: The labels below should be be rendered with their appropriate alignment in their row.  Row1=Left, Row2=Right, Row3=Center.  Note that in RTL mode right and left are reversed"));
            hi.add(new SpanLabel("Container paddings (trbl)=(0, 2mm, 2mm, 2mm)"));
            for (int align : alignments) {
                FlowLayout fl = new FlowLayout();
                fl.setAlign(align);
                Container cnt = new Container(fl);
                $(cnt).selectAllStyles()
                        .setBorder(Border.createLineBorder(1))
                        .setPaddingMillimeters(0, 2, 2, 2);
                Label l = new Label();
                $(l).selectAllStyles().setPadding(0).setMargin(0);
                cnt.add(l);
                hi.add(cnt);
                l.setText("TEXT"+align);


            }
            
            hi.add(new SpanLabel("Test 2a: The labels below should be be rendered with their appropriate alignment in their row.  Row1=Left, Row2=Right, Row3=Center.  Note that in RTL mode right and left are reversed"));
            hi.add(new SpanLabel("Container paddings (trbl)=(0, 1mm, 2mm, 3mm)"));
            for (int align : alignments) {
                FlowLayout fl = new FlowLayout();
                fl.setAlign(align);
                Container cnt = new Container(fl);
                $(cnt).selectAllStyles()
                        .setBorder(Border.createLineBorder(1))
                        .setPaddingMillimeters(0, 1, 2, 3);
                Label l = new Label();
                $(l).selectAllStyles().setPadding(0).setMargin(0);
                cnt.add(l);
                hi.add(cnt);
                l.setText("TEXT"+align);


            }

            hi.add(new SpanLabel("Test 3: Rendering multiple children in a FlowLayout.  The following 3 containers should render their children with the appropriate alignment.  Row 1: Left, Row2 Right, Row3=Center.  Reversed for RTL"));
            hi.add(new SpanLabel("Container paddings (trbl)=(0, 2mm, 2mm, 2mm)"));
            for (int align : alignments) {
                FlowLayout fl = new FlowLayout();
                fl.setAlign(align);
                Container cnt = new Container(fl);
                $(cnt).selectAllStyles()
                        .setBorder(Border.createLineBorder(1))
                        .setPaddingMillimeters(0, 2, 2, 2);
                for (int i=0; i<10; i++) {
                    Label l = new Label();
                    $(l).selectAllStyles().setPadding(0).setMargin(0);
                    cnt.add(l);
                    l.setText("TEXT "+align+" "+randomString());
                }

                hi.add(cnt);



            }
            hi.add(new Label("Hi World"));
        }
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        
        new TestForm().show();
    }

    static String[] strings = new String[]{
        "Sale on coats",
        "Steve",
        "December",
        "123",
        "A really long sring to see if if fits.  This should probably go over"
    };
    static int nextIndex = 0;
    private static final String randomString() {
        String out = strings[nextIndex];
        nextIndex = (nextIndex+1) % strings.length;
        return out;
    }
    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }
}
